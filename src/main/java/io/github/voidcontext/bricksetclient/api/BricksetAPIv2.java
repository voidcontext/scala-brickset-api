package io.github.voidcontext.bricksetclient.api;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.0.4
 * 2015-03-30T13:36:08.875Z
 * Generated source version: 3.0.4
 * 
 */
@WebServiceClient(name = "BricksetAPIv2", 
                  wsdlLocation = "file:main/resources/brickset-api-v2.wsdl",
                  targetNamespace = "http://brickset.com/api/") 
public class BricksetAPIv2 extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://brickset.com/api/", "BricksetAPIv2");
    public final static QName BricksetAPIv2HttpGet = new QName("http://brickset.com/api/", "BricksetAPIv2HttpGet");
    public final static QName BricksetAPIv2Soap12 = new QName("http://brickset.com/api/", "BricksetAPIv2Soap12");
    public final static QName BricksetAPIv2Soap = new QName("http://brickset.com/api/", "BricksetAPIv2Soap");
    public final static QName BricksetAPIv2HttpPost = new QName("http://brickset.com/api/", "BricksetAPIv2HttpPost");
    static {
        URL url = null;
        try {
            url = new URL("file:main/resources/brickset-api-v2.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(BricksetAPIv2.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:main/resources/brickset-api-v2.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public BricksetAPIv2(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public BricksetAPIv2(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public BricksetAPIv2() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public BricksetAPIv2(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public BricksetAPIv2(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public BricksetAPIv2(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    

    /**
     *
     * @return
     *     returns BricksetAPIv2HttpGet
     */
    @WebEndpoint(name = "BricksetAPIv2HttpGet")
    public BricksetAPIv2HttpGet getBricksetAPIv2HttpGet() {
        return super.getPort(BricksetAPIv2HttpGet, BricksetAPIv2HttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BricksetAPIv2HttpGet
     */
    @WebEndpoint(name = "BricksetAPIv2HttpGet")
    public BricksetAPIv2HttpGet getBricksetAPIv2HttpGet(WebServiceFeature... features) {
        return super.getPort(BricksetAPIv2HttpGet, BricksetAPIv2HttpGet.class, features);
    }
    /**
     *
     * @return
     *     returns BricksetAPIv2Soap
     */
    @WebEndpoint(name = "BricksetAPIv2Soap12")
    public BricksetAPIv2Soap getBricksetAPIv2Soap12() {
        return super.getPort(BricksetAPIv2Soap12, BricksetAPIv2Soap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BricksetAPIv2Soap
     */
    @WebEndpoint(name = "BricksetAPIv2Soap12")
    public BricksetAPIv2Soap getBricksetAPIv2Soap12(WebServiceFeature... features) {
        return super.getPort(BricksetAPIv2Soap12, BricksetAPIv2Soap.class, features);
    }
    /**
     *
     * @return
     *     returns BricksetAPIv2Soap
     */
    @WebEndpoint(name = "BricksetAPIv2Soap")
    public BricksetAPIv2Soap getBricksetAPIv2Soap() {
        return super.getPort(BricksetAPIv2Soap, BricksetAPIv2Soap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BricksetAPIv2Soap
     */
    @WebEndpoint(name = "BricksetAPIv2Soap")
    public BricksetAPIv2Soap getBricksetAPIv2Soap(WebServiceFeature... features) {
        return super.getPort(BricksetAPIv2Soap, BricksetAPIv2Soap.class, features);
    }
    /**
     *
     * @return
     *     returns BricksetAPIv2HttpPost
     */
    @WebEndpoint(name = "BricksetAPIv2HttpPost")
    public BricksetAPIv2HttpPost getBricksetAPIv2HttpPost() {
        return super.getPort(BricksetAPIv2HttpPost, BricksetAPIv2HttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BricksetAPIv2HttpPost
     */
    @WebEndpoint(name = "BricksetAPIv2HttpPost")
    public BricksetAPIv2HttpPost getBricksetAPIv2HttpPost(WebServiceFeature... features) {
        return super.getPort(BricksetAPIv2HttpPost, BricksetAPIv2HttpPost.class, features);
    }

}
